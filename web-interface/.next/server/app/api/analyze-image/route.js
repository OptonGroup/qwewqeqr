"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze-image/route";
exports.ids = ["app/api/analyze-image/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("fs/promises");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-image%2Froute&page=%2Fapi%2Fanalyze-image%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-image%2Froute.ts&appDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-image%2Froute&page=%2Fapi%2Fanalyze-image%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-image%2Froute.ts&appDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_maxsi_qwewqeqr_web_interface_src_app_api_analyze_image_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/analyze-image/route.ts */ \"(rsc)/./src/app/api/analyze-image/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze-image/route\",\n        pathname: \"/api/analyze-image\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze-image/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\maxsi\\\\qwewqeqr\\\\web-interface\\\\src\\\\app\\\\api\\\\analyze-image\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_maxsi_qwewqeqr_web_interface_src_app_api_analyze_image_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/analyze-image/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplLWltYWdlJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplLWltYWdlJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZS1pbWFnZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNtYXhzaSU1Q3F3ZXdxZXFyJTVDd2ViLWludGVyZmFjZSU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDbWF4c2klNUNxd2V3cWVxciU1Q3dlYi1pbnRlcmZhY2UmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2lDO0FBQzlHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmFuay1zdGF0ZW1lbnQtYW5hbHl6ZXIvP2EzNDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcbWF4c2lcXFxccXdld3FlcXJcXFxcd2ViLWludGVyZmFjZVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplLWltYWdlXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplLWltYWdlL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZS1pbWFnZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYW5hbHl6ZS1pbWFnZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXG1heHNpXFxcXHF3ZXdxZXFyXFxcXHdlYi1pbnRlcmZhY2VcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl6ZS1pbWFnZVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvYW5hbHl6ZS1pbWFnZS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-image%2Froute&page=%2Fapi%2Fanalyze-image%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-image%2Froute.ts&appDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/analyze-image/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/analyze-image/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs/promises */ \"fs/promises\");\n/* harmony import */ var fs_promises__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs_promises__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n// Путь к Python API\nconst PYTHON_API_URL = process.env.PYTHON_API_URL || \"http://localhost:8000\";\n// Проверка доступности Python API\nasync function checkApiAvailability() {\n    try {\n        const response = await fetch(`${PYTHON_API_URL}/health`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            signal: AbortSignal.timeout(3000) // Таймаут 3 секунды\n        });\n        return response.ok;\n    } catch (error) {\n        console.error(\"Ошибка при проверке доступности API:\", error);\n        return false;\n    }\n}\nasync function POST(request) {\n    try {\n        // Проверяем доступность Python API\n        const isApiAvailable = await checkApiAvailability();\n        console.log(`Python API доступен: ${isApiAvailable}`);\n        // Получаем FormData из запроса\n        const formData = await request.formData();\n        const image = formData.get(\"image\");\n        const gender = formData.get(\"gender\") || \"унисекс\";\n        if (!image) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Изображение не найдено\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`Параметр gender: ${gender}`);\n        // Создаем временный путь для сохранения изображения\n        const bytes = await image.arrayBuffer();\n        const buffer = Buffer.from(bytes);\n        const tempDir = path__WEBPACK_IMPORTED_MODULE_2___default().join(process.cwd(), \"public\", \"temp\");\n        // Создаем директорию temp, если она не существует\n        try {\n            await (0,fs_promises__WEBPACK_IMPORTED_MODULE_1__.access)(tempDir);\n        } catch  {\n            await (0,fs_promises__WEBPACK_IMPORTED_MODULE_1__.mkdir)(tempDir, {\n                recursive: true\n            });\n            console.log(`Создана директория: ${tempDir}`);\n        }\n        const fileName = `${Date.now()}_${image.name}`;\n        const filePath = path__WEBPACK_IMPORTED_MODULE_2___default().join(tempDir, fileName);\n        const fileUrl = `/temp/${fileName}`;\n        // Сохраняем изображение\n        await (0,fs_promises__WEBPACK_IMPORTED_MODULE_1__.writeFile)(filePath, buffer);\n        console.log(`Изображение сохранено: ${filePath}`);\n        // Если Python API доступен, отправляем запрос туда\n        if (isApiAvailable) {\n            try {\n                console.log(\"Отправляем запрос на Python API\");\n                // Создаем новый FormData для отправки в Python API\n                const pythonApiFormData = new FormData();\n                // В Python API ожидается файл с именем 'file'\n                pythonApiFormData.append(\"file\", new Blob([\n                    buffer\n                ], {\n                    type: image.type\n                }), fileName);\n                // Добавляем параметр gender\n                pythonApiFormData.append(\"gender\", gender);\n                // Отправляем запрос на Python API\n                const pythonApiResponse = await fetch(`${PYTHON_API_URL}/analyze-image`, {\n                    method: \"POST\",\n                    body: pythonApiFormData\n                });\n                if (!pythonApiResponse.ok) {\n                    const errorText = await pythonApiResponse.text();\n                    console.error(`Ошибка Python API: ${pythonApiResponse.status}`, errorText);\n                    throw new Error(`Ошибка Python API: ${pythonApiResponse.status}`);\n                }\n                const analysisData = await pythonApiResponse.json();\n                console.log(\"Получен ответ от Python API:\", analysisData);\n                // Обрабатываем ответ от Python API и преобразуем в формат для фронтенда\n                let results = [];\n                if (analysisData.results && Array.isArray(analysisData.results)) {\n                    results = analysisData.results;\n                } else if (analysisData.items && Array.isArray(analysisData.items)) {\n                    // Преобразуем формат данных из Python API в формат для фронтенда\n                    results = analysisData.items.map((item, index)=>({\n                            id: `${index + 1}`,\n                            name: item.name || item.type || \"Предмет одежды\",\n                            description: item.description || `${item.color || \"\"} ${item.material || \"\"}`.trim(),\n                            price: Math.floor(Math.random() * 5000) + 500,\n                            imageUrl: item.imageUrl || `https://basket-0${index % 9 + 1}.wbbasket.ru/vol${index + 1}00/part${index + 1}00${index + 1}/100${index + 1}${index + 1}${index + 1}/images/c516x688/1.webp`,\n                            category: item.category || \"Одежда\",\n                            gender: item.gender || \"унисекс\"\n                        }));\n                } else if (analysisData.elements && Array.isArray(analysisData.elements)) {\n                    // Обрабатываем формат с полем elements\n                    let allProducts = [];\n                    // Проходим по каждому элементу одежды\n                    for (const element of analysisData.elements){\n                        if (element.wb_products && Array.isArray(element.wb_products)) {\n                            // Преобразуем продукты из Wildberries в наш формат\n                            const products = element.wb_products.map((product, idx)=>({\n                                    id: product.id || `${element.type}-${idx}`,\n                                    name: product.name || `${element.color} ${element.type}`,\n                                    description: product.description || element.description || `${element.color} ${element.type}`,\n                                    price: product.price || 0,\n                                    oldPrice: product.priceU ? product.priceU / 100 : undefined,\n                                    sale_price: product.sale_price || product.salePriceU ? product.salePriceU / 100 : undefined,\n                                    imageUrl: product.imageUrl || product.img || product.pics && product.pics[0],\n                                    category: element.type || \"Одежда\",\n                                    gender: element.gender || gender || \"унисекс\",\n                                    url: product.url || product.link,\n                                    brand: product.brand\n                                }));\n                            allProducts = [\n                                ...allProducts,\n                                ...products\n                            ];\n                        } else {\n                            // Если нет wb_products, создаем демо-продукт на основе описания элемента\n                            allProducts.push({\n                                id: `${element.type}-demo`,\n                                name: `${element.color} ${element.type}`,\n                                description: element.description || `${element.color} ${element.type}`,\n                                price: Math.floor(Math.random() * 5000) + 500,\n                                imageUrl: `https://basket-0${allProducts.length % 9 + 1}.wbbasket.ru/vol${allProducts.length + 1}00/part${allProducts.length + 1}00${allProducts.length + 1}/100${allProducts.length + 1}${allProducts.length + 1}${allProducts.length + 1}/images/c516x688/1.webp`,\n                                category: element.type || \"Одежда\",\n                                gender: element.gender || gender || \"унисекс\"\n                            });\n                        }\n                    }\n                    results = allProducts;\n                } else {\n                    // Если ничего не найдено, используем моковые данные\n                    console.log(\"Неизвестный формат данных от Python API, используем моковые данные\");\n                    results = getMockResults(gender).results;\n                }\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    results,\n                    imageUrl: fileUrl,\n                    api_source: \"python\",\n                    analysis: analysisData.analysis || \"\"\n                });\n            } catch (error) {\n                console.error(\"Ошибка при обращении к Python API:\", error);\n                // В случае ошибки возвращаем моковые данные\n                const mockData = getMockResults(gender);\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    results: mockData.results,\n                    imageUrl: fileUrl,\n                    error: `Ошибка при обращении к Python API: ${error instanceof Error ? error.message : \"Неизвестная ошибка\"}`,\n                    api_source: \"mock\",\n                    analysis: \"Не удалось проанализировать изображение из-за ошибки API.\"\n                });\n            }\n        } else {\n            // Если Python API недоступен, используем моковые данные\n            console.log(\"Python API недоступен, используем моковые данные\");\n            const mockData = getMockResults(gender);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                results: mockData.results,\n                imageUrl: fileUrl,\n                api_source: \"mock\",\n                analysis: \"Анализ недоступен - сервер анализа изображений не отвечает.\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Ошибка при обработке изображения:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Произошла ошибка при обработке изображения\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Функция для получения моковых данных\nfunction getMockResults(gender = \"унисекс\") {\n    const userGender = gender.toLowerCase();\n    return {\n        results: [\n            {\n                id: \"1\",\n                name: \"Белая хлопковая футболка\",\n                description: \"Базовая футболка из органического хлопка с круглым вырезом\",\n                price: 999,\n                imageUrl: \"https://basket-01.wbbasket.ru/vol1001/part100135/100135766/images/c516x688/1.webp\",\n                category: \"Верх\",\n                gender: userGender\n            },\n            {\n                id: \"2\",\n                name: \"Белая футболка оверсайз\",\n                description: \"Свободная футболка свободного кроя из мягкого хлопка\",\n                price: 1299,\n                imageUrl: \"https://basket-03.wbbasket.ru/vol283/part28364/28364770/images/c516x688/1.webp\",\n                category: \"Верх\",\n                gender: userGender\n            },\n            {\n                id: \"3\",\n                name: \"Футболка с принтом\",\n                description: \"Стильная хлопковая футболка с графическим принтом\",\n                price: 1599,\n                imageUrl: \"https://basket-05.wbbasket.ru/vol758/part75846/75846387/images/c516x688/1.webp\",\n                category: \"Верх\",\n                gender: userGender === \"мужской\" ? \"мужской\" : \"женский\"\n            },\n            {\n                id: \"4\",\n                name: \"Базовая белая блузка\",\n                description: \"Элегантная блузка из смесового хлопка со свободным силуэтом\",\n                price: 2499,\n                imageUrl: \"https://basket-11.wbbasket.ru/vol1457/part145766/145766287/images/c516x688/1.webp\",\n                category: \"Верх\",\n                gender: \"женский\"\n            },\n            {\n                id: \"5\",\n                name: \"Черная хлопковая футболка\",\n                description: \"Классическая черная футболка из премиального хлопка\",\n                price: 1099,\n                imageUrl: \"https://basket-10.wbbasket.ru/vol1418/part141812/141812883/images/c516x688/1.webp\",\n                category: \"Верх\",\n                gender: \"мужской\"\n            },\n            {\n                id: \"6\",\n                name: \"Белая рубашка\",\n                description: \"Классическая рубашка из хлопка с длинным рукавом\",\n                price: 2999,\n                imageUrl: \"https://basket-12.wbbasket.ru/vol1688/part168842/168842122/images/c516x688/1.webp\",\n                category: \"Верх\",\n                gender: userGender === \"женский\" ? \"женский\" : \"мужской\"\n            }\n        ]\n    };\n}\n// Функция для разбора ответа от Python API и преобразования в формат ClothingRecognitionData\nfunction parseClothingItemsFromAnalysis(analysisData) {\n    // Если API вернул уже правильно отформатированные данные\n    if (analysisData.elements && Array.isArray(analysisData.elements)) {\n        return analysisData.elements.map((item)=>({\n                type: item.type || item.name || \"Предмет одежды\",\n                color: item.color || \"неизвестный\",\n                description: item.description || \"\",\n                material: item.material,\n                pattern: item.pattern,\n                gender: item.gender\n            }));\n    }\n    // Если API вернул данные в поле 'analysis'\n    if (analysisData.analysis) {\n        console.log(\"Получен анализ текста:\", analysisData.analysis);\n    }\n    // Если API вернул данные в нестандартной структуре, проверяем все возможные поля\n    const possibleDataFields = [\n        \"data\",\n        \"result\",\n        \"results\",\n        \"items\",\n        \"clothing_items\"\n    ];\n    for (const field of possibleDataFields){\n        if (analysisData[field] && (Array.isArray(analysisData[field]) || typeof analysisData[field] === \"object\")) {\n            console.log(`Найдены данные в поле ${field}:`, analysisData[field]);\n            if (Array.isArray(analysisData[field])) {\n                return analysisData[field].map((item)=>({\n                        type: item.type || item.name || \"Предмет одежды\",\n                        color: item.color || \"неизвестный\",\n                        description: item.description || \"\",\n                        material: item.material,\n                        pattern: item.pattern,\n                        gender: item.gender\n                    }));\n            }\n        }\n    }\n    // Если API вернул анализ в текстовом формате, пытаемся извлечь информацию о предметах одежды\n    const analysisText = analysisData.analysis || analysisData.description || \"\";\n    if (!analysisText) {\n        console.log(\"Нет текстового анализа, возвращаем моковые данные\");\n        return getMockAnalysisResponse().items;\n    }\n    // Пытаемся извлечь элементы одежды из текста\n    const clothingItems = [];\n    // Ищем упоминания предметов одежды в тексте\n    const commonClothingItems = [\n        \"футболка\",\n        \"рубашка\",\n        \"блузка\",\n        \"платье\",\n        \"юбка\",\n        \"брюки\",\n        \"джинсы\",\n        \"шорты\",\n        \"куртка\",\n        \"пальто\",\n        \"свитер\",\n        \"кардиган\",\n        \"худи\",\n        \"джемпер\",\n        \"кроссовки\",\n        \"туфли\",\n        \"ботинки\",\n        \"сапоги\",\n        \"кеды\",\n        \"шапка\",\n        \"шляпа\",\n        \"берет\",\n        \"кепка\",\n        \"шарф\",\n        \"перчатки\",\n        \"носки\",\n        \"колготки\",\n        \"белье\",\n        \"костюм\",\n        \"пиджак\",\n        \"жакет\",\n        \"блейзер\"\n    ];\n    // Ищем цвета\n    const commonColors = [\n        \"белый\",\n        \"черный\",\n        \"красный\",\n        \"синий\",\n        \"зеленый\",\n        \"желтый\",\n        \"оранжевый\",\n        \"фиолетовый\",\n        \"розовый\",\n        \"коричневый\",\n        \"серый\",\n        \"бежевый\",\n        \"голубой\"\n    ];\n    // Ищем материалы\n    const commonMaterials = [\n        \"хлопок\",\n        \"лен\",\n        \"шерсть\",\n        \"кожа\",\n        \"замша\",\n        \"шелк\",\n        \"деним\",\n        \"полиэстер\",\n        \"нейлон\",\n        \"трикотаж\",\n        \"вискоза\",\n        \"акрил\",\n        \"вельвет\",\n        \"твид\",\n        \"кашемир\"\n    ];\n    console.log(\"Анализируем текст:\", analysisText);\n    // Для каждого предмета одежды проверяем, упоминается ли он в тексте\n    for (const item of commonClothingItems){\n        const regex = new RegExp(`\\\\b${item}\\\\b`, \"i\");\n        if (regex.test(analysisText.toLowerCase())) {\n            console.log(`Найден предмет: ${item}`);\n            // Если предмет найден, пытаемся найти его цвет\n            let color = \"неизвестный\";\n            for (const c of commonColors){\n                const colorRegex = new RegExp(`\\\\b${c}\\\\w*\\\\s+${item}\\\\b|\\\\b${item}\\\\s+${c}\\\\w*\\\\b`, \"i\");\n                if (colorRegex.test(analysisText.toLowerCase())) {\n                    color = c;\n                    console.log(`  Найден цвет: ${color}`);\n                    break;\n                }\n            }\n            // Пытаемся найти материал\n            let material;\n            for (const m of commonMaterials){\n                const materialRegex = new RegExp(`\\\\b${m}\\\\w*\\\\s+${item}\\\\b|\\\\b${item}\\\\s+из\\\\s+${m}\\\\w*\\\\b|\\\\b${m}\\\\w*\\\\s+${item}\\\\b`, \"i\");\n                if (materialRegex.test(analysisText.toLowerCase())) {\n                    material = m;\n                    console.log(`  Найден материал: ${material}`);\n                    break;\n                }\n            }\n            clothingItems.push({\n                type: item.charAt(0).toUpperCase() + item.slice(1),\n                color,\n                description: \"\",\n                ...material && {\n                    material\n                },\n                gender: determineGender(analysisText, item)\n            });\n        }\n    }\n    if (clothingItems.length > 0) {\n        console.log(\"Найдены предметы одежды:\", clothingItems);\n        return clothingItems;\n    } else {\n        console.log(\"Не удалось распознать предметы одежды в тексте, возвращаем моковые данные\");\n        return getMockAnalysisResponse().items;\n    }\n}\n// Заглушка для тестирования, используется когда нет доступа к Python API\nfunction getMockAnalysisResponse(imageUrl) {\n    return {\n        items: [\n            {\n                type: \"Футболка\",\n                color: \"белая\",\n                description: \"хлопковая с круглым вырезом\",\n                material: \"хлопок\",\n                gender: \"женский\"\n            },\n            {\n                type: \"Джинсы\",\n                color: \"синие\",\n                description: \"классические прямого кроя\",\n                material: \"деним\",\n                gender: \"женский\"\n            }\n        ],\n        fullDescription: \"На изображении представлен повседневный комплект, состоящий из белой хлопковой футболки с круглым вырезом и классических прямых синих джинсов.\"\n    };\n}\n// Функция для определения пола из текста анализа\nfunction determineGender(text, itemName) {\n    // Ищем явное указание пола для всего образа\n    const generalGenderMatch = text.match(/ПОЛ:\\s*(мужской|женский|унисекс)/i);\n    let generalGender = generalGenderMatch ? generalGenderMatch[1].toLowerCase() : undefined;\n    // Ищем указание пола для конкретного предмета\n    const itemGenderRegex = new RegExp(`(${itemName}).*?пол:\\\\s*(мужской|женский|унисекс)`, \"i\");\n    const itemGenderMatch = text.match(itemGenderRegex);\n    // Возвращаем пол для конкретного предмета, если найден, иначе общий пол\n    return itemGenderMatch ? itemGenderMatch[2].toLowerCase() : generalGender;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/analyze-image/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze-image%2Froute&page=%2Fapi%2Fanalyze-image%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze-image%2Froute.ts&appDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmaxsi%5Cqwewqeqr%5Cweb-interface&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();