You are an expert AI programming assistant that primarily focuses on producing clear, readable React and TypeScript code.

You always use the latest stable version of TypeScript, JavaScript, React, Node.js, Next.js App Router, Shaden UI, Tailwind CSS and you are familiar with the latest features and best practices.

You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning AI to chat, to generate code.

Style and Structure

Naming Conventions

TypeScript Usage

UI and Styling

Performance Optimization

Other Rules need to follow:

Don't be lazy, write all the code to implement features I ask for.

# Наблюдения и план улучшений кода

## Текущее состояние
- Метод `determine_user_needs_async` успешно обрабатывает запросы для всех ролей (нутрициолог, стилист, косметолог, дизайнер)
- Уже есть хорошая обработка JSON с несколькими методами восстановления
- Кэширование реализовано с использованием файлового хранилища
- Добавлена система сбора метрик и логирования
- Код структурирован вокруг класса ChatAssistant, который содержит методы для разных экспертиз
- Реализована асинхронная работа с API Wildberries для поиска товаров
- Есть поддержка различных моделей (OpenAI, OpenRouter)
- Имеются тесты для проверки функциональности
- **Реализован модуль для работы с банковскими выписками (bank_statement_parser.py)**
- **Добавлен тестовый скрипт для проверки функциональности парсера выписок**
- **Реализована поддержка формата банковских выписок Тинькофф**
- **Выполнена интеграция модуля банковских выписок с основным кодом ChatAssistant**

## Выявленные проблемы
- Отсутствуют компоненты для фронтенд-части проекта (веб-интерфейс)
- Нет интерактивного режима уточнения предпочтений
- Отсутствует визуализация результатов и предложений

## План разработки

### 1. Интеграция с банковскими выписками ✅
- ✅ Создан модуль для парсинга банковских выписок Тинькофф банка
- ✅ Реализован парсинг выписок в формате PDF и текстовом формате
- ✅ Добавлено извлечение метаданных из выписки (договор, счет, ФИО, период)
- ✅ Разработан классификатор транзакций по категориям
- ✅ Реализован анализ расходов пользователя за период
- ✅ Добавлено прогнозирование будущих трат
- ✅ Реализована визуализация расходов (диаграммы, графики)
- ✅ Добавлено кэширование результатов обработки выписок
- ✅ Выполнена интеграция модуля банковских выписок с основным кодом ChatAssistant

### 2. Разработка веб-интерфейса
- Создать современный React + TypeScript + Tailwind CSS интерфейс
- Реализовать адаптивный дизайн
- Добавить чат-интерфейс с возможностью загрузки файлов
- Интегрировать визуализацию данных и рекомендаций
- Обеспечить поддержку темной и светлой темы

### 3. Улучшение функциональности по ролям
- Реализовать интеграцию с Pinterest API
- Добавить анализ изображений для распознавания предметов одежды
- Разработать интерактивные макеты для роли дизайнера
- Добавить функции для работы с гардеробом пользователя
- Расширить рекомендации нутрициолога с учетом бюджета

### 4. Оптимизация существующего кода
- Улучшить обработку ошибок
- Оптимизировать производительность кэширования
- Расширить систему метрик и логирования
- Добавить инвалидацию кэша при изменении структуры данных

## Наблюдения по реализации модуля банковских выписок

### Реализованная функциональность
1. **Парсинг выписок**:
   - Создан класс `BankStatementParser` для работы с банковскими выписками
   - Реализован метод для извлечения транзакций из PDF-файлов с помощью pdfplumber
   - Добавлено кэширование результатов парсинга для оптимизации производительности
   - Добавлено извлечение метаданных из выписок (номер договора, счета, период выписки, ФИО)
   - Реализована поддержка формата выписок Тинькофф банка

2. **Классификация транзакций**:
   - Реализована система классификации транзакций по категориям на основе ключевых слов
   - Поддерживаются категории: Продукты, Рестораны, Одежда, Транспорт, Развлечения, Красота, Здоровье и др.
   - Разработан механизм классификации транзакций с учетом описания операции

3. **Анализ расходов**:
   - Добавлены методы для анализа расходов по категориям
   - Реализован анализ трендов расходов по месяцам
   - Создан метод для прогнозирования будущих расходов на основе исторических данных
   - Добавлен расчет среднемесячных расходов по категориям

4. **Визуализация**:
   - Добавлены методы для визуализации расходов в виде круговых диаграмм и гистограмм
   - Реализовано сохранение визуализаций в файлы для последующего использования
   - Добавлено построение графиков тренда расходов по месяцам

5. **Генерация отчетов**:
   - Создан метод для генерации полного отчета о расходах
   - Отчет включает общую сумму расходов, распределение по категориям, тренды и прогнозы
   - Добавлено сохранение отчета в формате JSON для использования во фронтенд-части

6. **Интеграция с ChatAssistant**:
   - Добавлен импорт модуля банковских выписок в класс ChatAssistant
   - Реализованы методы для парсинга банковских выписок через интерфейс ChatAssistant
   - Добавлен метод для генерации отчетов о расходах с визуализацией
   - Реализован метод для получения финансовых рекомендаций на основе анализа выписки
   - Добавлена поддержка форматов PDF и TXT для банковских выписок

### Выявленные проблемы и решения
1. **Проблема сериализации объектов Period**:
   - При сохранении отчета в JSON возникала ошибка сериализации объектов Period из pandas
   - Решение: добавлено преобразование Period в строковый формат с помощью astype(str)

2. **Предупреждения SettingWithCopyWarning**:
   - При работе с DataFrame возникали предупреждения о модификации копии данных
   - Решение: добавлен явный вызов метода copy() при создании подмножеств DataFrame

3. **Проблема извлечения транзакций из разных форматов выписок**:
   - Формат выписок может отличаться в зависимости от банка и периода
   - Решение: добавлена поддержка различных форматов и регулярных выражений для извлечения данных

### Следующие шаги
1. **Улучшение классификации транзакций**:
   - Добавить машинное обучение для более точной классификации транзакций
   - Реализовать возможность пользовательской настройки категорий

2. **Расширение функциональности анализа**:
   - Добавить более сложные методы прогнозирования (линейная регрессия, ARIMA)
   - Реализовать выявление аномальных расходов и уведомление пользователя

3. **Развитие интерфейса взаимодействия с выписками**:
   - Добавить визуальный интерфейс для загрузки и анализа выписок
   - Реализовать интерактивные дашборды для анализа расходов
   - Добавить возможность экспорта отчетов в различные форматы (PDF, Excel)

## Планы дальнейшего развития

### Общая функциональность
1. **Интерактивное взаимодействие**:
   - Расширить возможности корректировки предложенного набора товаров на основе обратной связи пользователя
   - Реализовать механизм уточнения предпочтений в процессе подбора

2. **Интеграция с внешними источниками данных**:
   - Добавить загрузку информации о покупках, корзине и тратах пользователя
   - Разработать аналитический модуль с визуализацией статистики расходов
   - Минимизировать ввод информации от пользователя через автоматический сбор данных
   - **Интеграция с банковскими выписками**:
     - Разработать модуль для извлечения и анализа информации о расходах, доходах и состоянии счета из PDF-выписок банка (например, Тинькофф) за последние 3 месяца
     - Классифицировать транзакции по категориям для формирования рекомендаций по бюджету
     - Автоматически определять доступные средства для покупок в разных категориях
     - Учитывать регулярные платежи и создавать прогнозы расходов
     - Анализировать данные из имеющегося примера выписки Тинькофф банка, содержащей информацию о движении средств (даты, суммы, описания операций)

3. **Пользовательский интерфейс**:
   - Разработать современный, отзывчивый веб-интерфейс с использованием React и Tailwind CSS
   - Обеспечить адаптивный дизайн для мобильных устройств и десктопов
   - Реализовать интуитивно понятный чат-интерфейс с возможностью загрузки изображений и файлов
   - Создать систему уведомлений о новых рекомендациях и специальных предложениях
   - Обеспечить безопасное хранение и передачу данных через HTTPS
   - Подготовить решение для развертывания на различных хостинг-платформах (AWS, Heroku, Vercel и др.)

### Расширение функциональности по ролям

#### Стилист
1. **Интеграция с Pinterest**:
   - Реализовать поиск похожих образов по загруженной фотографии
   - Использовать CV для распознавания предметов одежды на фотографиях
   - Искать товары по изображению через API Wildberries

2. **Работа с гардеробом пользователя**:
   - Предлагать варианты луков на основе имеющейся у пользователя одежды
   - Анализировать популярные тренды и адаптировать их под гардероб пользователя
   - Учитывать данные о расходах на одежду из банковских выписок при формировании рекомендаций

#### Косметолог
1. **Расширенные рекомендации**:
   - Разработать разные подходы для рекомендаций по гендерному признаку
   - Интегрировать базу знаний от профессиональных косметологов
   - Адаптировать рекомендации с учетом исторических расходов на косметические средства

#### Дизайнер
1. **Визуализация решений**:
   - Реализовать генерацию визуальных предложений (наложение предметов на фото интерьера)
   - Использовать открытые инструменты для рисования поверх фотографий
   - Формировать ценовые категории предложений на основе анализа финансовых возможностей из выписок

2. **Интерактивные макеты**:
   - Создание виртуальных макетов помещения с возможностью перестановки предметов

#### Нутрициолог
1. **Расширенная работа с бюджетом**:
   - Анализ бюджета на основе ежемесячных трат на продукты из банковских выписок
   - Перераспределение бюджета для оптимизации питания
   - Выявление закономерностей в расходах на питание для формирования более экономичных и здоровых альтернатив

2. **Интеграция с сервисами питания**:
   - Разработка двух режимов: для опытных пользователей (с детальными настройками КБЖУ) и упрощенный для новичков

3. **Анализ рациона**:
   - Оценка текущего рациона и предложение изменений в соответствии с целями (набор массы, похудение, рельеф)
   - Создание персонализированных планов питания на основе предпочтений и ограничений

## Требования к пользовательскому интерфейсу
- Создать современный, эстетически приятный интерфейс для взаимодействия с ботом
- Обеспечить плавные анимации и удобный UX/UI
- Реализовать адаптивную верстку для всех типов устройств
- Предусмотреть возможность загрузки и отображения PDF-выписок и изображений
- Обеспечить поддержку темного и светлого режимов
- Подготовить решение для размещения на популярных хостинг-платформах (AWS, Vercel, Netlify)
- Обеспечить быструю загрузку интерфейса и оптимизацию производительности

## Замечания по виртуальной среде
- Путь к виртуальной среде не содержит ожидаемую структуру папок (отсутствует папка Scripts)
- Для запуска тестов рекомендуется использовать системный Python


## Дальнейшие направления развития
1. **Оптимизация производительности**:
   - Реализация параллельной обработки запросов
   - Оптимизация механизма сериализации/десериализации объектов
   - Добавление механизма предварительной загрузки данных

2. **Улучшение интерфейса пользователя**:
   - Локализация уточняющих вопросов
   - Приоритизация вопросов в зависимости от контекста
   - Настройка формата ответов

3. **Расширение функциональности**:
   - Интеграция с другими API и сервисами
   - Добавление новых ролей и экспертиз
   - Улучшение алгоритмов подбора товаров

# Планируемые улучшения (отложено)

## 1. Улучшение метода _sanitize_cache_key_input
- Расширить список стоп-слов (добавить больше русских и английских стоп-слов)
- Улучшить хеширование ключей для повышения уникальности
- Добавить удаление семантически неважных слов
- Реализовать лемматизацию слов для более эффективного сопоставления похожих запросов
- Добавить обработку ключевых слов и повышение их важности
- Оптимизировать удаление дубликатов и сортировку для повышения производительности

## 2. Улучшение обработки ошибок
- Добавить более детальную классификацию ошибок (json_parsing, data_processing, network, file_system)
- Улучшить механизм повторных попыток (retry) с добавлением jitter для предотвращения "эффекта лавины"
- Добавить запись метрик по типам ошибок для последующего анализа
- Реализовать ротацию файлов метрик для предотвращения их бесконтрольного роста
- Добавить механизм оповещения о критических ошибках

## 3. Оптимизация производительности кэширования
- Оптимизировать механизм сериализации/десериализации объектов UserPreferences
- Добавить сжатие кэша для больших объектов, снижающее занимаемое дисковое пространство
- Реализовать более строгую валидацию восстановленных из кэша данных
- Добавить подсистему для инвалидации кэша при изменении структуры данных
- Реализовать многоуровневый кэш (память + диск) для повышения производительности

## 4. Улучшение логирования и метрик
- Расширить систему метрик для более детального анализа производительности
- Добавить визуализацию метрик через генерацию отчетов
- Реализовать систему предупреждений при аномальных показателях метрик
- Улучшить формат логов для удобства анализа

# Анализ текущего состояния фронтенда и план разработки

## 1. Компоненты и их функциональность

### Общие компоненты UI (shadcn/ui)
- Button - кнопки с разными вариантами стилей
- Card (CardHeader, CardContent, etc.) - карточки для отображения информации
- Input - поля ввода
- Textarea - многострочные поля ввода
- Tabs - табы для навигации

### Основные компоненты приложения
1. StylistAssistant
   - Поиск по фото
   - Поиск по текстовому описанию
   - Управление гардеробом
   - Персональные рекомендации

### Текущие моковые данные
```typescript
interface GarmentItem {
  id: string;
  name: string;
  description: string;
  price: number;
  imageUrl: string;
  category: string;
}
```

## 2. Функциональность для бэкенда

### 2.1 Поиск по фото (image-search)
Текущее состояние:
- ✅ UI для загрузки фото
- ✅ Предпросмотр загруженного изображения
- ❌ Реальный поиск похожих товаров
- ❌ API для обработки изображений

Необходимо:
- API эндпоинт для загрузки изображений
- Система распознавания одежды на фото
- Алгоритм поиска похожих товаров
- База данных товаров с изображениями

### 2.2 Поиск по описанию (text-search)
Текущее состояние:
- ✅ UI для ввода текстового описания
- ✅ Быстрые кнопки с популярными запросами
- ❌ Реальный поиск по описанию
- ❌ API для текстового поиска

Необходимо:
- API эндпоинт для текстового поиска
- Система обработки естественного языка
- Поисковый движок по товарам
- Индексация товаров для быстрого поиска

### 2.3 Гардероб пользователя (wardrobe)
Текущее состояние:
- ✅ UI для отображения предметов гардероба
- ✅ Категоризация одежды
- ✅ Создание комплектов
- ❌ Сохранение данных пользователя
- ❌ API для управления гардеробом

Необходимо:
- База данных для хранения гардероба пользователя
- API эндпоинты для CRUD операций с предметами гардероба
- Система управления комплектами одежды
- Аутентификация и авторизация пользователей

### 2.4 Рекомендации (recommendations)
Текущее состояние:
- ✅ UI для отображения рекомендаций
- ✅ Разделение на категории рекомендаций
- ❌ Реальные персонализированные рекомендации
- ❌ API для получения рекомендаций

Необходимо:
- Система рекомендаций на основе предпочтений пользователя
- API эндпоинты для получения рекомендаций
- Алгоритмы анализа стиля пользователя
- База данных для хранения предпочтений

## 3. Общие требования к бэкенду

### 3.1 База данных
Необходимые сущности:
- Users (пользователи)
- GarmentItems (предметы одежды)
- Outfits (комплекты)
- Categories (категории одежды)
- UserPreferences (предпочтения пользователей)
- Images (изображения)

### 3.2 API Endpoints
Основные группы эндпоинтов:
- /api/auth/* - аутентификация и авторизация
- /api/wardrobe/* - управление гардеробом
- /api/search/* - поиск товаров
- /api/recommendations/* - получение рекомендаций
- /api/outfits/* - управление комплектами

### 3.3 Безопасность
Необходимые механизмы:
- JWT аутентификация
- Защита от CSRF
- Валидация входных данных
- Ограничение размера загружаемых файлов
- Безопасное хранение паролей

### 3.4 Производительность
Требования:
- Кэширование часто запрашиваемых данных
- Оптимизация запросов к БД
- Масштабируемая архитектура
- Обработка изображений на стороне сервера
- Пагинация результатов

## 4. Этапы разработки бэкенда

1. Базовая настройка:
   - Выбор технологического стека
   - Настройка окружения
   - Создание базовой структуры проекта

2. База данных:
   - Проектирование схемы БД
   - Создание миграций
   - Настройка ORM

3. Аутентификация:
   - Регистрация и вход
   - Управление сессиями
   - Восстановление пароля

4. API для гардероба:
   - CRUD операции с предметами
   - Управление категориями
   - Работа с комплектами

5. Поисковая система:
   - Текстовый поиск
   - Поиск по изображениям
   - Фильтрация результатов

6. Система рекомендаций:
   - Анализ предпочтений
   - Генерация рекомендаций
   - Персонализация контента

7. Оптимизация:
   - Кэширование
   - Индексация
   - Масштабирование

## 5. Текущие моковые данные для замены

```typescript
const mockItems: GarmentItem[] = [
  {
    id: '1',
    name: 'Базовая белая футболка',
    description: 'Универсальная хлопковая футболка свободного кроя',
    price: 999,
    imageUrl: '...',
    category: 'Верх'
  },
  // ... другие элементы
];
```

Эти данные нужно будет заменить на реальные, получаемые с бэкенда.

